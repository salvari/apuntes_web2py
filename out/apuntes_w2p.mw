= Web2py =

Toda la info [http://web2py.com aquí]

== Instalación de web2py ==

=== Instalación standalone ===

Bajamos el programa de la [http://www.web2py.com/init/default/download web de Web2py]

Descomprimimos el framework,

Preparamos los certificados

<pre>openssl genrsa -out server.key 2048
openssl req -new -key server.key -out server.csr

Country Name (2 letter code) [AU]:ES
State or Province Name (full name) [Some-State]:CORUNA
Locality Name (eg, city) []:CORUNA
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Vodafone
Organizational Unit Name (eg, section) []:TNO
Common Name (e.g. server FQDN or YOUR name) []:txfinder
Email Address []:sergio.alvarino@vodafone.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:secret1t05
An optional company name []:Vodafone Spain</pre>
Ejecutamos:

<pre>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</pre>
Ahora deberíamos tener los ficheros <code>server.key</code>, <code>server.csr</code> y <code>server.crt</code> en el directorio raiz de ''web2py'', una vez generados estos ficheros tenemos que arrancar el servidor con los siguientes parámetros:

<pre>python web2py.py -a 'admin_password' -c server.crt -k server.key -i 0.0.0.0 -p 8000</pre>
Y ya podemos acceder nuestro server en la dirección <code>https://localhost:8000</code>

=== Desplegar web2py con Nginx ===

==== Instalación de ''web2py'' ====

Vamos a instalar web2py en ''/var/www'' a nivel global. Será nuestro web2py para servir aplicaciones en producción. <ref>Mejor comprobar donde está la última versión del fichero ''sources'' de web2py para hacer el wget
</ref>

<pre class="{bash}">cd
mkdir tmp
cd tmp
wget https://mdipierro.pythonanywhere.com/examples/static/web2py_src.zip
unzip web2py_src.zip
mv web2py /var/www
cd /var/www
chown -R www-data:www-data web2py/</pre>
Vamos a probar el ''web2py''

Primero generamos una clave para tener acceso al interfaz de administración:

<pre class="{bash}">cd /var/www/web2py
openssl req -x509 -new -newkey rsa:4096 -days 3652 -nodes -keyout myweb2py.key -out myweb2py.crt
.
.
.
Country Name (2 letter code) [AU]:ES
State or Province Name (full name) [Some-State]:Coruna
Locality Name (eg, city) []:A Coruna
Organization Name (eg, company) [Internet Widgits Pty Ltd]:sOjO
Organizational Unit Name (eg, section) []:Development
Common Name (e.g. server FQDN or YOUR name) []:51.255.37.47
Email Address []:salvari@gmail.com</pre>
Abrimos un puerto de desarrollo en el servidor (voy a abrir el 8080):

<pre class="{bash}">ufw allow 8080/tcp</pre>
Arrancamos el ''web2py'':

<pre class="{bash}">python web2py.py -k myweb2py.key -c myweb2py.crt -i 0.0.0.0 -p 8000</pre>
Y visitamos en el navegador la dirección de nuestro servidor [https://vps223560.ovh.net:8080]

Si vemos un warning de que nuestro server no es seguro todo va bien. Nuestro navegador nos avisa por qué el certificado no está firmado por una CA que el conozca. Le decimos que siga y veremos la página de web2py.

Ya podemos parar el ''web2py'' que hemos arrancado con un '''Crl+C'''

==== Instalación de uWSGI ====

Lo vamos a instalar globalmente, hay que asegurarse de que tenemos instalados:

<pre class="{bash}">apt install python-pip python-dev python3-dev python-setuptools
apt install build-essential</pre>
Podemos instalar ''uWSGI'' desde los repos de debian o mediante pip. Lo vamos a hacer con pip.

Y ahora instalamos ''uWSGI'' sin más que:

<pre class="{bash}">pip install wheel
pip install uwsgi</pre>
Por alguna razón nos falla. El ''pip'' deja el ''uwsgi'' instalado en ''/usr/local/bin'' pero cuando lo ejecutamos nos responde que no existe el fichero ''/usr/bin/uwsgi''. Para salir del paso he hecho:

<pre class="{bash}">cd /usr/bin/
ln -s /usr/local/bin/uwsgi .</pre>
The uWSGI application container server interfaces with Python applications using the WSGI inteface specification. The web2py framework includes a file designed to provide this interface within its handlers directory. To use the file, we need to move it out of the directory and into the main project directory:

<pre class="{bash}">cd /var/www/web2py
mv handlers/wsgihandler.py .</pre>
Hacemos una comprobación rápida de que ''uWSGI'' puede servir peticiones con:

<pre class="{bash}">uwsgi --http :8080 --chdir /var/www/web2py -w wsgihandler:application</pre>
Podremos visitar nuestro ''web2py'' en la dirección [http://vps223560.ovh.net:8080] ¡Ojo! Sin ''SSL''.

Vale, una vez probado que todo funciona vamos a dejar configurado el servicio ''uWSGI'' en ''systemd''.

Creamos un fichero <code>/lib/systemd/system/uwsgi.service</code> que contenga:

<pre>[Unit]
Description=uWSGI Emperor
After=syslog.target

[Service]
ExecStart=/usr/local/bin/uwsgi --ini /etc/uwsgi/emperor.ini
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target</pre>
Tenemos que crear también el correspondiente fichero <code>/etc/uwsgi/emperor.ini</code> con el siguiente contenido:

<pre>[uwsgi]
emperor = /etc/uwsgi/apps-enabled
uid = www-data
gid = www-data
limit-as = 1024
logto = /tmp/uwsgi.log</pre>
Tenemos que crear un fichero de configuración para el &quot;''vassal''&quot; <ref>Ver doc de uWSGI
</ref> correspondiente a ''web2py'', el fichero <code>/etc/uwsgi/apps-available/web2py.ini</code>, con el contenido siguiente:

<pre class="{ini}">[uwsgi]
chdir = /var/wwww/web2py
module = wsgihandler:application

master = true
processes = 4

socket = /var/www/web2py/web2pyUwsgi.sock
chmod-socket = 660
vacuum = true</pre>
Basicamente le estamos diciendo al ''uWSGI'':

* En que directorio y cual es el fichero de ''handler'' de nuestra aplicación.
* Que lance cuatro procesos (¿conviene mirar el número de cpu del server?)
* Que se comunique con ''Nginx'' a través de un ''socket''
* Cambiamos las propiedades del ''socket''
* Y con la opción ''vacuum'' le decimos que limpie el ''socket'' cuando el proceso termine

Probamos el servicio que hemos configurado:

<pre>systemctl start uwsgi
systemctl uwsgi status uwsgi</pre>
'''Nota''': Falló por que había un fichero en /etc/init.d/uwsgi. He movido este fichero a otra localización y ya funciona, depués de ejecutar <code>systemctl daemon-reload</code>

Una vez que vemos que funciona, lo paramos con <code>systemctl stop uwsgi</code>

Enlazamos el fichero del ''vassal'' de ''web2py'' en el directorio <code>/etc/uwsgi/apps-enabled</code>:

<pre>cd /etc/uwsgi/apps-enabled
ln -s /etc/uwsgi/apps-available/web2py.ini</pre>
Y ahora dejamos ''uWSGI'' habilitado como servicio y arrancado:

<pre>systemctl enable uwsgi
systemctl start uwsgi</pre>
==== Nginx ====

Copiamos el certificado y la clave SSL al directorio ''/etc/nginx/ssl'':

<pre class="{bash}">mkdir /etc/nginx/ssl
mv /var/www/web2py/myweb2py.crt /etc/nginx/ssl
mv /var/www/web2py/myweb2py.key /etc/nginx/ssl</pre>
Creamos un fichero ''/etc/nginx/sites-available/web2py'' con el siguiente contenido:

<pre>server {
  listen 80;
  listen [::]:80;

  server_name vps223560.ovh.net;

  root /var/www/html;
  index index.html;

  location ~* /(\w+)/static/ {
    root /var/www/web2py/applications/;
  }
  location / {
    include uwsgi_params;
        uwsgi_pass unix:/var/www/web2py/web2pyUwsgi.sock
  }
}

server {
    listen 443;
    server_name vps223560.ovh.net;

    root html;
    index index.html index.htm;

    ssl on;
    ssl_certificate /etc/nginx/ssl/myweb2py.crt;
    ssl_certificate_key /etc/nginx/ssl/myweb2py.key;

    ssl_session_timeout 5m;

    #ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers &quot;HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES&quot;;
    ssl_prefer_server_ciphers on;

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/var/www/web2py/myweb2pyUwsgi.sock;
    }
}</pre>
=== Desplegar un repo de desarrollo con un web2py dedicado ===

rollo

== Preparando una aplicación ==

# Crea una aplicación desde el interfaz de administración, en nuestro caso la llamaremos '''pyfinder'''
# Para usar ''MySQL'' como motor de base de datos: Editamos el fichero ''applications/alloer/private/appconfig.ini'', tenemos que poner el uri que apunta a nuestra base de datos, sustituyendo ''dbUser'', ''dbPass'' y ''dbName'' por valores reales.

<pre class="{python}">    ; App configuration
    [app]
    name        = PyFinder
    author      = Sergio Alvariño &lt;sergio.alvarino@vodafone.com&gt;
    description = TxFinder en Web2Py
    keywords    = Thope, TxFinder, web2py, python, framework
    generator   = Web2py Web Framework
     
    ; Host configuration
    [host]
    names = localhost:*, 127.0.0.1:*, *:*, *
     
    ; db configuration
    [db]
    ; uri       = sqlite://storage.sqlite
    uri         = mysql://dbUser:dbPass@localhost/dbName
     
    migrate   = true
    pool_size = 10 ; ignored for sqlite
     
    ; smtp address and credentials
    [smtp]
    server = smtp.gmail.com:587
    sender = salvari@gmail.com
    login  = username:password
    tls    = true
    ssl    = true
     
    ; form styling
    [forms]
    formstyle = bootstrap3_inline
    separator = </pre>
<ol start="3" style="list-style-type: decimal;">
<li>Editamos el fichero ''applications/alloer/models/db.py'' Tenemos que asegurarnos de editar esta sección para que no nos de problemas con palabras reservadas:</li></ol>

<pre class="{python}">    db = DAL(myconf.get('db.uri'),
             pool_size=myconf.get('db.pool_size'),
             migrate_enabled=myconf.get('db.migrate'),
             check_reserved=['mysql'])
    #         check_reserved=['all'])</pre>
<ol start="4" style="list-style-type: decimal;">
<li><p>Creamos un fichero ''db_custom.py'' en el directorio: ''applications/alloer/models'' El fichero tiene que ser parecido al que figura a continuación.</p>
<p>'''IMPORTANTE''': en cada tabla crear el campo ''id'' de tipo ''integer'', es para uso interno de ''web2py''</p>
<p>'''IMPORTANTE''': especificar <code>migrate FALSE</code> al final en todas las tablas externas</p></li></ol>

=== Ejemplo de contenido del fichero ''db_custom.py'' ===

<pre class="{python}">db.define_table('afoxtfo',
    Field('id', 'integer'),
    Field('opti_of_connection_id' , 'string'),
    Field('afo' , 'string'),
    Field('afo_fiber' , 'string'),
    Field('opti_cable_id' , 'string'),
    Field('tfo' , 'string'),
    Field('tfo_fiber' , 'string'),
    Field('cable_endpoint' , 'string'),
    Field('side' , 'string'),
    Field('state' , 'string'),
    Field('loaddate' , 'string'),
    migrate = False);</pre>
== DAL ==

=== Union de tablas db.executesql ===

El código de abajo funciona correctamente, el método <code>executesql</code> necesita que le pasemos una referencia a un campo real de la base de datos, no he sido capaz de hacerlo funcionar de ninguna otra forma.

<pre class="{python}">    sql = &quot;&quot;&quot;
    SELECT origination_node AS node
      FROM site s,
           segment g
     WHERE s.id = {0}
       AND s.site_name = g.origination_site_name
    UNION
    SELECT destination_node AS node
      FROM site s,
           segment g
     WHERE s.id = {0}
       AND s.site_name = g.destination_site_name&quot;&quot;&quot;.format(myid)

    coloc_nodes = db.executesql(sql, fields=[db.segment.origination_node], colnames=['node'])</pre>
Ejemplos, sacados de Google code:

<pre class="{python}">db.define_table('person', Field('name'), Field('email'))
db.define_table('dog', Field('name'), Field('owner', 'reference person'))
db.executesql([SQL code returning person.name and dog.name fields], fields=[db.person.name, db.dog.name])
db.executesql([SQL code returning all fields from db.person], fields=db.person)
db.executesql([SQL code returning all fields from both tables], fields=[db.person, db.dog])
db.executesql([SQL code returning person.name and all db.dog fields], fields=[db.person.name, db.dog])</pre>
== web2py y git ==

Hay varias formas de hacer el desarrollo. Yo he optado por tener un web2py

Es importante tener el siguiente fichero ''.gitignore'' en el directorio ''web2py''

<pre class="{git}">.*
!.gitignore
*.pyc
*.pyo
*~
#*
*.1
*.bak
*.bak2
*.svn
*.w2p
*.class
*.rej
*.orig
Thumbs.db
.DS_Store
*.DS_Store
# index.yaml
# routes.py
# logging.conf
# gluon/tests/VERSION
# gluon/tests/sql.log
httpserver.log
httpserver.pid
parameters*.py
# ./deposit
# ./benchmark
# ./build
# ./dist*
# ./dummy_tests
# ./optional_contrib
# ./ssl
# ./docs
# ./logs
# ./*.zip
# ./gluon/*.1
# ./gluon/*.txt
# ./admin.w2p
# ./examples.w2p
CHANGELOG
LICENSE
MANIFEST.in
README.markdown
VERSION
anyserver.py
web2py.py
examples/*
handlers/*
extras/*
gluon/*
scripts/*
site-packages/*
applications/welcome
applications/examples
applications/admin
applications/*/databases/*
applications/*/sessions/*
applications/*/errors/*
applications/*/cache/*
applications/*/uploads/*
applications/*/private/*
applications/*/*.py[oc]
applications/*/static/temp
applications/*/progress.log
# applications/examples/static/epydoc
# applications/examples/static/sphinx
# applications/admin/cron/cron.master
# HOWTO-web2py-devel
# logs/
# cron.master</pre>
= Tutoriales en la red =

== Killer Web Development por Marco Laspe ==

Disponible [http://killer-web-development.com aquí]

=== Cambios ===

<code>Crud</code> debe ser importado explícitamente:

<pre class="{python}">from gluon.tools import Crud
crud = Crud(db)</pre>
Despues ya podemos seguir el tutorial haciendo por ejemplo:

<pre class="{python}">def entry_post():
    &quot;&quot;&quot;returns a form where the user can entry a post&quot;&quot;&quot;
    form = crud.create(db.post)
    return dict(form=form)</pre>
= Python =

== Decorators ==

''Decorators'' añadidos desde Python 2.4 para permitir que el ''function and method wrapping'' fuese más fácil de leer y entender. ''function and method wrapping'' consiste en implementar una función (o método) que recibe como parámetro una función (¿o método?) y devuelve una función mejorada.

El caso de uso original era definir los métodos como métodos de Clase o métodos estáticos en la cabecera de su definición.

La receta general:

<pre class="{python}">def mydecorator(function):
    def _mydecorator(*args, **kw):
        # do some stuff before the real 
        # function gets called 
        res = function(*args, **kw)
        # do some stuff after
        return res
    # returns the sub-function
    return _mydecorator</pre>
El intérprete carga los ''decorators'' cuando se lee el módulo la primera vez, debe limitarse su uso a ''wrappers'' que puedan aplicarse de forma genérica. Si el ''decorator'' está fuertemente acoplado con la clase o función que decora debería reescribirse y convertirlo en un invocable regular para evitar la complejidad.

Patrónes típicos:

* Argument checking
* Caching
* Proxy
* Context provider


-----

<blockquote>'''Nota:''' En web2py parece que los ''decorators'' se usan tipicamente como proveedores de contexto. Hay que ver como funciona la sentencia <code>with</code> de Python 2.5 que se crea con el mismo propósito.
</blockquote>
<references />
